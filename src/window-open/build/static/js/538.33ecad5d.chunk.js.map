{"version":3,"file":"static/js/538.33ecad5d.chunk.js","mappings":"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","sources":["bridge/electron/Modal/index.tsx","bridge/electron/Modal/util.js"],"sourcesContent":["// @ts-nocheck\r\n\r\nimport { memo, useRef, useMemo, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { stringify } from 'qs';\r\nimport { copyStyles } from './util';\r\nimport './index.less';\r\n\r\nconst vPadding = 20;\r\nconst hPadding = 20;\r\n// 本组件只用于electron端多开窗口时使用\r\n// winOptions同electron new Browserwindow传入的选项一致\r\n// 由于window.open第三个参数在浏览器的支持并不是很好，因此这里取个巧，用第二个参数传递窗口的配置项，\r\n// 然后在electron端拦截\r\nconst WindowPortal = ({\r\n  children,\r\n  closeAfterBlur = true,\r\n  onBlur,\r\n  onClose,\r\n  visible,\r\n  winOptions,\r\n  name,\r\n}) => {\r\n  const windowInstance = useRef(null);\r\n  const winOptionRef = useRef(null);\r\n  const containerEl = useMemo(() => {\r\n    if (visible) {\r\n      return document.createElement('div');\r\n    }\r\n  }, [visible]);\r\n  winOptionRef.current = winOptions;\r\n  useEffect(() => {\r\n    if (!visible) {\r\n      windowInstance.current && windowInstance.current.close();\r\n      windowInstance.current = null;\r\n      return;\r\n    }\r\n    // 默认选项\r\n    const defaultBrowserWindowOptions = {\r\n      transparent: true,\r\n      backgroundColor: '#00000000',\r\n      width: 400,\r\n      height: 400,\r\n      // frame: false,\r\n      // x: 0,\r\n      // y: 0,\r\n      // movable: true,\r\n      // resizable: false,\r\n    };\r\n\r\n    const browserwinOptions = {\r\n      ...defaultBrowserWindowOptions,\r\n      ...winOptionRef.current,\r\n      name,\r\n    }\r\n    browserwinOptions.__portalType = 'modal'; // 和主进程约定的协议，用于拦截窗口的创建\r\n    browserwinOptions.width = browserwinOptions.width + vPadding * 2; // 为了实现阴影\r\n    browserwinOptions.height = browserwinOptions.height + hPadding * 2; // 为了实现阴影\r\n    const { x, width, y, height } = browserwinOptions;\r\n    // 如果没有传递x和y，则打开时默认居中\r\n    const left = x === undefined ? window.screen.width / 2 - width / 2 : x - hPadding;\r\n    let top = y === undefined ? window.screen.height / 2 - height / 2 : y - vPadding;\r\n    browserwinOptions.x = left; // 为了实现阴影\r\n    browserwinOptions.y = top; // 为了实现阴影\r\n    windowInstance.current = window.open(\r\n      '',\r\n      stringify(browserwinOptions),\r\n      `left=${left},top=${top},width=${width},height=${height}`,\r\n    );\r\n    if (!windowInstance.current) return;\r\n    containerEl?.setAttribute('class', 'ele-modal-wrap');\r\n    windowInstance.current.document.body.appendChild(containerEl);\r\n    windowInstance.current.document.head.innerHTML = '';\r\n    copyStyles(document, windowInstance.current.document);\r\n  }, [name, visible, containerEl]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (!windowInstance.current) return;\r\n\r\n    const onBlurInner = () => {\r\n      // 默认失焦关闭\r\n      if (closeAfterBlur && windowInstance.current) {\r\n        windowInstance.current.close();\r\n        windowInstance.current = null;\r\n        onClose && onClose();\r\n      }\r\n      if (onBlur) {\r\n        onBlur();\r\n      }\r\n    };\r\n    const onBeforeunload = () => {\r\n      onClose();\r\n    };\r\n    windowInstance.current.addEventListener('blur', onBlurInner);\r\n    windowInstance.current.addEventListener('beforeunload', onBeforeunload);\r\n    return () => {\r\n      if (!windowInstance.current) return;\r\n      windowInstance.current.removeEventListener('blur', onBlurInner);\r\n      windowInstance.current.removeEventListener('beforeunload', onBeforeunload);\r\n    };\r\n  }, [visible, onBlur, onClose, closeAfterBlur]);\r\n  useEffect(() => {\r\n    window.addEventListener('beforeunload', () => {\r\n      windowInstance.current && windowInstance.current.close();\r\n      windowInstance.current = null;\r\n    });\r\n    return () => {\r\n      windowInstance.current && windowInstance.current.close();\r\n      windowInstance.current = null;\r\n    };\r\n  }, []);\r\n  if (!visible) return null;\r\n  return ReactDOM.createPortal(children, containerEl);\r\n};\r\n\r\nexport default memo(WindowPortal);\r\n","export const copyStyles = (sourceDoc, targetDoc) => {\r\n  Array.from(sourceDoc.styleSheets).forEach((styleSheet: any) => {\r\n    if (styleSheet.cssRules) {\r\n      // 内联样式\r\n      const newStyleEl = sourceDoc.createElement(\"style\");\r\n\r\n      Array.from(styleSheet.cssRules).forEach((cssRule: any) => {\r\n        newStyleEl.appendChild(sourceDoc.createTextNode(cssRule.cssText));\r\n      });\r\n\r\n      targetDoc.head.appendChild(newStyleEl);\r\n    } else if (styleSheet.href) {\r\n      // 外联样式\r\n      const newLinkEl = sourceDoc.createElement(\"link\");\r\n\r\n      newLinkEl.rel = \"stylesheet\";\r\n      newLinkEl.href = styleSheet.href;\r\n      targetDoc.head.appendChild(newLinkEl);\r\n    }\r\n  });\r\n  const script = targetDoc.createElement(\"script\");\r\n  script.src = \"http://localhost:3000/test.js\";\r\n  targetDoc.head.appendChild(script);\r\n};\r\n"],"names":["WindowPortal","_ref","children","closeAfterBlur","onBlur","onClose","visible","winOptions","name","windowInstance","useRef","winOptionRef","containerEl","useMemo","document","createElement","current","useEffect","close","browserwinOptions","transparent","backgroundColor","width","height","__portalType","vPadding","hPadding","x","y","left","undefined","window","screen","top","open","stringify","setAttribute","body","appendChild","head","innerHTML","copyStyles","onBlurInner","onBeforeunload","addEventListener","removeEventListener","ReactDOM","memo","sourceDoc","targetDoc","Array","from","styleSheets","forEach","styleSheet","cssRules","newStyleEl","cssRule","createTextNode","cssText","href","newLinkEl","rel","script","src"],"sourceRoot":""}